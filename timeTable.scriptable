{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "light-gray",
    "glyph" : "calendar-times"
  },
  "name" : "timeTable",
  "script" : "\/\/ declare variables\nlet list = new ListWidget()\nnextRefresh = Date.now() + 1000\nlist.refreshAfterDate = new Date(nextRefresh)\nlet time = new Date()\/\/ \ntime = new Date('2023\/2\/23 13:20')\nlet day = time.getDay() \/\/ index of today's day\nlet hmNow = time.getHours()*100 + time.getMinutes()\nlet mmNow = minutize(hmNow)\nlet fm = FileManager.local()\nconst docPath = fm.documentsDirectory()\nconst dataDir = docPath + '\/schedule'\nconst confPath = dataDir + '\/settings'\nconst timeTablePath = dataDir + '\/classes'\nconst fmt = new DateFormatter()\nconst base_day = new Date('5 March 2023') \/\/ standard day for week judgement\nconst SatCheck = [6, 13].includes(day)\nconst maxClass = SatCheck ? 3:6\nconst gradient = new LinearGradient()\nlet padding = 2  \/\/ change this value to gain\/reduce padding\nconst days = [\"\", \"A月\", \"A火\", \"A水\", \"A木\", \"A金\", \"A土\", \"\", \"B月\", \"B火\", \"B水\", \"B木\", \"B金\", \"B土\"]\n\nif (!fm.fileExists(dataDir)) {\n  fm.createDirectory(dataDir)\n  let defaultTimeTable = [[],[\"物理\",\"現文\",\"化学\",\"地理\",\"体育\",\"コ英\",\"数①\"],\n    [\"世A\",\"数②\",\"数①\",\"地理\",\"情報\",\"化学\",\"古典\"],\n    [\"コ英\",\"体育\",\"現文\",\"物理\",\"英表\",\"数①\",\"LHR\"],\n    [\"英表\",\"世A\",\"化学\",\"コ英\",\"古典\",\"数①\",\"数②\"],\n    [\"物理\",\"情報\",\"体育\",\"探究\",\"コ英\",\"数②\",\"数①\"],\n    [\"数学\",\"数学\",\"化学\",\"化学\",\"　　\",\"　　\",\"　　\"],\n    [],[\"物理\",\"情報\",\"世A\",\"古典\",\"体育\",\"化学\",\"コ英\"],\n    [\"世A\",\"数②\",\"英表\",\"化学\",\"情報\",\"数①\",\"地理\"],\n    [\"数②\",\"体育\",\"地理\",\"現文\",\"物理\",\"コ英\",\"LHR\"],\n    [\"地理\",\"英表\",\"コ英\",\"古典\",\"数②\",\"数①\",\"化学\"],\n    [\"物理\",\"現文\",\"体育\",\"探究\",\"コ英\",\"数①\",\"地理\"],\n    [\"物理\",\"物理\",\"国語\",\"国語\",\"　　\",\"　　\",\"　　\"]]\n  let defaultConfig = {\n  \t\"light\": {\n  \t\t\"bg\": \"#fc\",\n  \t\t\"lineColor\": \"#8a91991f\",\n  \t\t\"defaultText\": \"#5c6166\",\n  \t\t\"title\": \"#4cbf99\",\n  \t\t\"current\": \"#55b4d4\",\n  \t\t\"updateTime\": \"#787b80\",\n  \t\t\"accent\": \"#f2ae49\"\n  \t\t},\n  \t\"dark\": {\n  \t\t\"bg\": \"#3c\",\n  \t\t\"lineColor\": \"#6d6d6daf\",\n  \t\t\"defaultText\": \"#df\",\n  \t\t\"title\": \"#7fffd4\",\n  \t\t\"current\": \"#23abef\",\n  \t\t\"updateTime\": \"#df\",\n  \t\t\"accent\": \"#848f72\"\n  \t\t},\n  \t\"toast\": {\n  \t\t\"bg\": \"#fffcd4\",\n  \t\t\"lineColor\": \"#fef787af\",\n  \t\t\"defaultText\": \"#807e6a\",\n  \t\t\"title\": \"#d5b77a\",\n  \t\t\"current\": \"#6e5735\",\n  \t\t\"updateTime\": \"#8c764a\",\n  \t\t\"accent\": \"#cdff94\"\n  \t\t},\n  \t\"custom\": {\n  \t\t\"bg\": \"#282a36\",\n  \t\t\"lineColor\": \"#44475ab0\",\n  \t\t\"defaultText\": \"#f8f8f2\",\n  \t\t\"title\": \"#bd93f9\",\n  \t\t\"current\": \"#8be9fd\",\n  \t\t\"updateTime\": \"#50fa7b\",\n  \t\t\"accent\": \"#6272a4\"\n  \t\t},\n  \t\"theme\": \"custom\",\n  \t\"sysColumnStart\": 0.323,\n  \t\"sysSpacePerColumn\": 0.066,\n  \t\"sysLineHeight\": 0.03,\n  \t\"sysLineOffset\": 0,\n  \t\"bg\": \"12abef\",\n  \t\"lineColor\": \"12abef\"\n  }\n  fm.writeString(timeTablePath, JSON.stringify(defaultTimeTable))\n  console.log(confPath)\n  fm.writeString(confPath, JSON.stringify(defaultConfig))\n}\n\nconst Schedule = JSON.parse(fm.readString(timeTablePath))\nconst settings = JSON.parse(fm.readString(confPath))\nconst timeLength = [6,13].includes(day) ?\n  [' ~ 8:40',\n  '8:50 ~ 9:35',\n  '9:45 ~ 10:30',\n  '10:40 ~ 11:25',\n  '11:35 ~ 12:20',\n  '12:20 ~ '\n  ] :\n  [' ~ 8:40',\n  '8:50 ~ 9:35',\n  '9:45 ~ 10:30',\n  '10:40 ~ 11:25',\n  '11:50 ~ 12:35',\n  '13:00 ~ 13:45',\n  '13:55 ~ 14:40',\n  '14:50 ~ 15:35',\n  '15:45 ~ '\n  ]\n\nsettings.theme = settings[settings.theme]\n\nlet TimeSplit = SatCheck ? [850, 945, 1040, 1135, 1220] : [850, 945, 1040, 1150, 1300, 1355, 1450, 1545]  \/\/ reversed timestamp of classes\nlet TimeSplitMinutes = SatCheck ? [530, 585, 640, 695, 750] : [530,585,640,710,780,835,890,945]\n\nif (hmNow < 850) {\n  var classIndex = -1\n} else {\n  for (var i of TimeSplit.slice().reverse()) {\n    if (hmNow >= i) {\n      var classIndex = TimeSplit.indexOf(i)  \/\/ number of classes before the current class\n      break\n    }\n  }\n}\n\n\/\/ basic settings\nfmt.dateFormat = 'M\/d (eee) HH:mm:ss'\nif (parseInt((time.getTime() - base_day) \/ 86400000 % 14) > 6){\n  day += 7\n}\n\nconst data = {\n  'isAfterSchool' : classIndex > maxClass,\n  'isBeforeSchool' : hmNow < 850,\n  'isSunday' : [0, 7].includes(day),\n  'week' : [1,2,3,4,5,6,7].includes(day) ? 'A':'B', \/\/ if day < 6, set A else B (when week is B, day ranges from 7~13) (Sunday is0 or 7, and we should reagard Sunday as next week to see Monday's class)\n  'now' : hmNow < 850 ? '始業前' : hmNow >= TimeSplit[maxClass+1] ? '放課後' : Schedule[day][classIndex],\n  'next' : classIndex == maxClass ? '放課後' : classIndex > maxClass ? \/*'Today\\'s class has ended'*\/'今日の授業は終了しました' : Schedule[day][classIndex + 1],\n  'period' : timeLength[classIndex+1],\n  'nextPeriod' : timeLength[classIndex+2],\n  'isRestTime' : [2,3].includes(classIndex) ? 45 < mmNow - TimeSplitMinutes[classIndex] && mmNow - TimeSplitMinutes[classIndex] < 70 : 45 < mmNow - TimeSplitMinutes[classIndex] && mmNow - TimeSplitMinutes[classIndex] < 55,\n}\n\/\/ modify data object using its property\n{\n  data.isAtSchool = !(data.isAfterSchool || data.isBeforeSchool)\n  data.minutesLeft = data.isRestTime ? TimeSplitMinutes[classIndex+1] - mmNow : TimeSplitMinutes[classIndex] - mmNow + 45\n}\n\n\/\/ define functions\nfunction minutize(n) {\n  n = String(n)\n  return 60 * (n.length == 3 ? n[0]:n.slice(0,2)) + Number(n.slice(-2))\n}\n\nasync function registerTimeTable() {\n  let alert = new Alert()\n  alert.title = \"時間割をコピーしていますか\"\n  alert.addAction(\"Yes\")\n  alert.addAction(\"No\")\n  var isNotCopied = await alert.presentAlert()\n  if (isNotCopied) {\n    Safari.open(\"https:\/\/a-ori-a.github.io\/class-schedule-editor\/\")\n  }\n  alert = new Alert()\n  alert.title = \"コピーした時間割を下にペーストしてください\"\n  alert.addTextField()\n  alert.addAction('OK')\n  await alert.presentAlert()\n  let newTimeTable = alert.textFieldValue(0)\n  let validFlag = true\n  try {\n    JSON.parse(newTimeTable)\n  } catch (e) {\n    validFlag = false\n    alert = new Alert()\n    alert.title = 'Error'\n    alert.message = 'Invalid time table'\n    alert.addAction('OK')\n    alert.presentAlert()\n  }\n  if (validFlag) {\n    fm.writeString(timeTablePath, newTimeTable)\n    alert = new Alert()\n    alert.message = 'New timetable registered'\n    alert.addAction('OK')\n    alert.presentAlert()\n  }\n}\n\nasync function changeConfig() {\n  let newConfig = JSON.parse(fm.readString(confPath)) \/\/ this is old config which gonna be a new config\n  let alert = new Alert()\n  alert.title = '変更する設定を選択してください'\n  let elements = Object.keys(settings)\n  elements = ['カラーテーマの変更', 'カスタムテーマの設定', '横線の位置の変更']\n  for (let i of elements) {\n    alert.addAction(i)\n  }\n  alert.title = 'どのカラーテーマにしますか(default: custom)'\n  let configToChange = await alert.presentAlert()\n  switch (configToChange) {\n    case 0: \/\/ color scheme\n      alert = new Alert()\n      for (let i of ['light', 'dark', 'toast', 'custom']) {\n        alert.addAction(i)\n      }\n      let newTheme = await alert.present()\n      newConfig.theme = ['light', 'dark', 'toast', 'custom'][newTheme]\n      alert = new Alert()\n      alert.title = 'カラーテーマが'+newConfig.theme+'に変更されました'\n      alert.addCancelAction('OK')\n      alert.presentAlert()\n      break\n    case 1:\n    \talert = new Alert()\n      for (let i of ['背景色','線の色','教科の文字の色', '「時間割」の色', '現在の授業の色', '更新時刻、曜日の色', '小さめのウィジェットでのアクセントカラー']) {\n        alert.addAction(i)\n      }\n      alert.title = '色を変更する項目を選択してください'\n      alert.addCancelAction('Cancel')\n      let newProperty = await alert.presentAlert()\n      if (newProperty != -1) {\n        alert = new Alert()\n        alert.title = '色のカラーコードを入力して下さい。#はあってもなくても構いません。カラーコードが正しいかの確認は取っていないのでうまく行かなかったら入力し直して見て下さい。'\n        alert.addTextField()\n        alert.addCancelAction('Cancel')\n        alert.addAction('OK')\n        let newColor = await alert.presentAlert()\n        newConfig.custom[(['bg','lineColor','defaultText', 'title', 'current', 'updateTime', 'accent'][newProperty])] = alert.textFieldValue(0)\n      }\n    \tbreak\n    case 2:\n      console.log('horizontal line')\n      break\n  }\n  fm.writeString(confPath ,JSON.stringify(newConfig))\n}\n\nasync function showAvailability() {\n  let alert = new Alert()\n  alert.title = '対応状況'\n  alert.message = '基本的に無印のiPadのみに対応しています。iPad ProやiPad Airなどでは画面サイズが違うため表示が崩れる可能性が高いです。今後もProやAirに対応する予定はないので適宜追加して下さい。'\n  alert.addAction('OK')\n  await alert.presentAlert()\n}\n\nif (config.runsInApp) { \/\/ open settings\n  let alert = new Alert()\n  alert.title = '何をしたいですか？'\n  alert.addAction(\"時間割の登録\")\n  alert.addAction(\"設定の変更\")\n  alert.addAction(\"対応状況について\")\n  alert.addCancelAction('Cancel')\n  var userChoice = await alert.presentAlert()\n  switch (userChoice) {\n    case 0:\n      registerTimeTable()\n      break\n    case 1:\n      changeConfig()\n      break\n    case 2:\n      showAvailability()\n      break\n  }\n}\n\n\/\/ ---- main script ----------- \nif (config.widgetFamily == 'extraLarge') {\n  \/\/ extraLarge\n \tlist.backgroundColor = new Color(settings.theme.bg)\n\tif (data.isAfterSchool || data.isSunday) {\n\t} else {\n\t\tlet start = new Color(settings.theme.bg)\n\t\tlet line = new Color(settings.theme.lineColor)\n    if (data.isRestTime) {\n      settings.sysLineHeight = 0.005\n      settings.sysLineOffset = 0.031\n    } else if (data.isBeforeSchool) {\n      settings.sysLineHeight = 0.005\n      settings.sysLineOffset = 0.03\n    }\n\t\tlet turnPoints = [0, settings.sysColumnStart + (classIndex*settings.sysSpacePerColumn)-settings.sysLineHeight + settings.sysLineOffset, settings.sysColumnStart + (classIndex*settings.sysSpacePerColumn)+settings.sysLineHeight + settings.sysLineOffset, 1]\n\t\tgradient.colors = [start, start, line, line, start, start]\n\t\tgradient.locations = [turnPoints[0], turnPoints[1], turnPoints[1], turnPoints[2], turnPoints[2], turnPoints[3]]\n    list.backgroundGradient = gradient\n\t}\n  list.addSpacer(10)\n  \/\/ title\n  let a = list.addText(text='時間割')\n  a.centerAlignText()\n  a.font = new Font('Kailasa-Bold', 24)\n  a.textColor = new Color(settings.theme.title)\n  list.addSpacer(10)\n  \n  let main = list.addStack()\n  main.topAlignContent()\n  main.addSpacer()\n  for (var i = 0; i < 14; i++) {\n    if (i % 7 != 0) {\n      var thisLine = main.addStack()\n      thisLine.layoutVertically()\n      thisLine.topAlignContent()\n     thisLine.setPadding(3, padding, 3, padding)\n      thisLine.cornerRadius = 7\n      if (i == day) {\n        thisLine.backgroundColor = new Color(settings.theme.lineColor) \/\/ today's line\n        var  todayFlag = true\n      }\n      var currentItem = thisLine.addText(days[i])\n      currentItem.centerAlignText()\n      currentItem.textColor = new Color(settings.theme.updateTime)\n      currentItem.font = new Font('Kailasa-Bold', 16)\n      thisLine.addSpacer(8)\n      for (var j = 0; j < Schedule[i].length; j++) {\n        \/\/ center text (in a stack)\n        currentItem = thisLine.addText(Schedule[i][j])  \/\/ add subject\n        currentItem.rightAlignText()\n        currentItem.font = new Font('Kailasa', 16)\n        if (todayFlag && j == classIndex && j <= maxClass) { \/\/ when it is processing the current class (change text color)\n          if (!data.isRestTime) {\n            currentItem.font = new Font('Kailasa-Bold', 16)\n            currentItem.textColor = new Color(settings.theme.current)\n          } else {\n            currentItem.textColor = new Color(settings.theme.defaultText)\n          }\n          todayFlag = false\n        } else {\n          currentItem.textColor = new Color(settings.theme.defaultText)  \/\/ default subject text color\n        }\n      }\n    }\n\t\tmain.addSpacer()\n  }\n  \n  \/\/ show class indicators unless it is not Sunday (when it's Sunday, show 'have a nice weekend')\n\tif (!data.isSunday) {\n    list.addSpacer(8)\n    \/\/ class indicator label stack\n    let classLabels = list.addStack()\n    var tmp = classLabels.addText('Current Class')\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('Kailasa-Bold', 13)\n    classLabels.addSpacer()\n    tmp = classLabels.addText('Next Class')\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('Kailasa-Bold', 13)\n    \n    list.addSpacer(5)\n    let classNames = list.addStack()\n    classNames.layoutHorizontally()\n    if (classIndex >= 7) { \/\/ index out of range\n      tmp = classNames.addText(\"放課後\")\n    } else if (!data.isRestTime) { \/\/ show current class unless it's break ------- modify here\n      tmp = classNames.addText(data.now + ' (' + data.period + ')')\n    } else if (data.isRestTime) {\n      tmp = classNames.addText('休み時間')\n    }\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('kailasa-Bold', 13)\n    \n    classNames.addSpacer() \/\/ always put spacer\n    tmp = classNames.addText((!data.isAfterSchool ? '(' + data.nextPeriod + ')':'') + data.next) \/\/ show next class unless it's 7th class\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('Kailasa-Bold', 13)\n  } else { \/\/ show have a nice weeknd\n    tmp = list.addText('Have a nice weekend')\n    tmp.font = new Font('Kailasa-Bold', 20)\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.centerAlignText()\n  }  \n  var lastUpdate = list.addText('Last updated : ' + fmt.string(time))\n  lastUpdate.textColor = new Color(settings.theme.updateTime)\n  lastUpdate.rightAlignText()\n  lastUpdate.font = new Font('Kailasa-Bold', 10)\n}\nelse if (config.widgetFamily == 'small')\n{\n  \/\/ small widget (146 x 146)\n  list.backgroundColor = new Color(settings.theme.bg)\n  let information = list.addStack()\n  let current = information.addStack() \/\/ left side\n\tcurrent = current.addStack()\n  let smallRight = information.addStack() \/\/ right stack\n  let next = smallRight.addStack() \/\/ top right\n  let under = smallRight.addStack() \/\/ bottom right\n  smallRight.layoutVertically()\n  current.centerAlignContent()\n  next.centerAlignContent()\n\tunder.centerAlignContent()\n  current.size = new Size(53,146)\n  current.backgroundColor = new Color(settings.theme.title)\n  next.backgroundColor = new Color(settings.theme.bg)\n  under.backgroundColor = new Color(settings.theme.accent)\n  smallRight.size = new Size(93, 146)\n  under.size = new Size(93, 46)\n  next.size = new Size(93,100)\n\tif (data.isSunday) {\n    tmp = current.addText('Sunday')\n    tmp.font = new Font('Kailasa-Bold', 13)\n    tmp.textColor = new Color(settings.theme.updateTime)\n    tmp = next.addText('Have a nice weekend')\n    tmp.font = new Font('Kailasa_Bold', 13)\n    tmp.textColor = new Color(settings.theme.updateTime)\n    tmp.centerAlignText()\n  } else {\n    \/\/ left side (current class indicator)\n    tmp = current.addText(data.now + '\\n\\n' + data.period.split(' ~ ').join('\\n~\\n'))\n    tmp.font = new Font('Kailasa-Bold', 13)\n    tmp.centerAlignText()\n    tmp.textColor = new Color(settings.theme.bg)\n    \/\/ top-right (next class indicator)\n  \ttmp = next.addText(data.next + (typeof data.nextPeriod != 'undefined' ? '\\n\\n' + data.nextPeriod.split(' ~ ').join(' ~ ') : ''))\n    tmp.centerAlignText()\n    tmp.font = new Font('Kailasa-Bold', 13)\n    tmp.textColor = new Color(settings.theme.updateTime)\n    if (data.isAtSchool) {\n      tmp = under.addText(data.minutesLeft + '\\nminutes left')\n\t    tmp.centerAlignText()\n      tmp.font = new Font('Kailasa-Bold', 13)\n  \t  tmp.textColor = new Color(settings.theme.updateTime)\n  }\n    }\n} \nelse if (config.widgetFamily == 'large')\n{ \/\/ large widget here\n  \/\/ modify startPoint of the horizontal line\n\/\/  padding = 8\n\tsettings.sysColumnStart = 0.32\n  settings.sysSpacePerColumn = 0.0605\n  settings.sysLineHeight = 0.029\n  if (data.isAfterSchool || data.isSunday) {\n \t list.backgroundColor = new Color(settings.theme.bg)\n\t} else {\n\t\tlet start = new Color(settings.theme.bg)\n\t\tlet line = new Color(settings.theme.lineColor)\n    if (data.isRestTime) {\n      settings.sysLineHeight = 0.003\n      settings.sysLineOffset = 0.028\n    } else if (data.isBeforeSchool) {\n      settings.sysLineHeight = 0.005\n      settings.sysLineOffset = 0.025\n    }\n\t\tlet turnPoints = [0, settings.sysColumnStart + (classIndex*settings.sysSpacePerColumn)-settings.sysLineHeight + settings.sysLineOffset, settings.sysColumnStart + (classIndex*settings.sysSpacePerColumn)+settings.sysLineHeight + settings.sysLineOffset, 1]\n\t\tgradient.colors = [start, start, line, line, start, start]\n\t\tgradient.locations = [turnPoints[0], turnPoints[1], turnPoints[1], turnPoints[2], turnPoints[2], turnPoints[3]]\n    list.backgroundGradient = gradient\n\t}\n  \n  list.backgroundColor = new Color(settings.theme.bg)\n  list.addSpacer(15)\n  let title = list.addText('時間割')\n  list.addSpacer(7)\n  title.centerAlignText()\n  title.font = new Font('Kailasa-Bold', 24)\n  title.textColor = new Color(settings.theme.title)\n  if (data.week == 'A') {\n    var startFrom = 0\n  } else if (data.week = 'B') {\n    var startFrom = 7\n  }\n  let main = list.addStack()\n  main.addSpacer()\n  for (var i = startFrom;i<startFrom+7;i++) { \/\/ week\n    if (i % 7 != 0) { \/\/ when it is not Sunday\n      var thisLine = main.addStack()\n      thisLine.layoutVertically()\n      thisLine.topAlignContent()\n     thisLine.setPadding(3, padding, 3, padding) \/\/ should I use settings.padding? I don't know : I don't know\n\t\t\tthisLine.cornerRadius = 7\n      if (i == day) {\n        thisLine.backgroundColor = new Color(settings.theme.lineColor) \/\/ highlight today's line\n\t\t\t\tvar todayFlag = true\n      }\n      var currentItem = thisLine.addText(days[i]) \/\/ day indicato\n\t\t\tcurrentItem.font = new Font('Kailasa-Bold', 15)\n      currentItem.textColor = new Color(settings.theme.updateTime)\n      thisLine.addSpacer(3)\n      for (var j = 0; j < Schedule[i].length; j++) {\n        currentItem = thisLine.addText(Schedule[i][j]) \/\/ add subject\n\t\t\t\tcurrentItem.centerAlignText()\n        currentItem.font = new Font('Kailasa', 15)\n        if (todayFlag && j == classIndex) {\n          if (!data.isRestTime) {\n            currentItem.font = new Font('Kailasa-Bold', 15)\n            currentItem.textColor = new Color(settings.theme.current)\n          } else {\n            currentItem.textColor = new Color(settings.theme.defaultText)\n          }\n          todayFlag = false\n        } else {\n          currentItem.textColor = new Color(settings.theme.defaultText)\n        }\n      }\n    }\n    main.addSpacer()\n  }\n  \/\/ all subject filled\n\t\/\/ show horizontal line\n  if (!data.isSunday) {\n    list.addSpacer()\n    \/\/ class indicator label stack\n    let classLabels = list.addStack()\n    var tmp = classLabels.addText('Current Class')\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('Kailasa-Bold', 13)\n    classLabels.addSpacer()\n    tmp = classLabels.addText('Next Class')\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('Kailasa-Bold', 13)\n    \n    list.addSpacer(5)\n    let classNames = list.addStack()\n    classNames.layoutHorizontally()\n    if (classIndex >= 7) { \/\/ index out of range\n      tmp = classNames.addText(\"放課後\")\n    } else if (!data.isRestTime) { \/\/ show current class unless it's break ------- modify here\n      tmp = classNames.addText(data.now + ' (' + data.period + ')')\n    } else if (data.isRestTime) {\n      tmp = classNames.addText('休み時間')\n    }\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('kailasa-Bold', 13)\n    \n    classNames.addSpacer() \/\/ always put spacer\n    tmp = classNames.addText((!data.isAfterSchool ? '(' + data.nextPeriod + ')':'') + data.next) \/\/ show next class unless it's 7th class\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.font = new Font('Kailasa-Bold', 13)\n  } else { \/\/ show have a nice weeknd\n\t\tlist.addSpacer()\n    tmp = list.addText('Have a nice weekend')\n    tmp.font = new Font('Kailasa-Bold', 17)\n    tmp.textColor = new Color(settings.theme.current)\n    tmp.centerAlignText()\n  }\n}\nelse if (config.widgetFamily == 'medium')\n{\n  list.backgroundColor = new Color(settings.theme.accent)\n  let main =list.addStack()\n  let today = main.addStack()\n  today.backgroundColor = new Color(settings.theme.lineColor)\n  today.layoutVertically()\n  today.size = new Size(70,146)\n  today.addSpacer(10)\n  if (data.isSunday) {\n    day += 1\n  }\n  for (var i=0;i<Schedule[day].length;i++) {\n    let tmpStack = today.addStack()\n    tmpStack.addSpacer()\n    let subject = tmpStack.addText(Schedule[day][i]+'    ')\n    if (i == classIndex && !data.isSunday) {\n      subject.textColor = new Color(settings.theme.current)\n    } else { \n    \tsubject.textColor = new Color(settings.theme.defaultText)\n    }\n    subject.leftAlignText()\n    subject.font = new Font('Kailasa-Bold', 14)\n  }\n  today.addSpacer()\n  let rightSide = main.addStack()\n  rightSide.layoutVertically()\n  rightSide.centerAlignContent()\n  let now = rightSide.addStack()\n  now.backgroundColor = new Color(settings.theme.bg)\n  now.size = new Size(220,73)\n  now.layoutVertically()\n  now = now.addStack()\n  now.addSpacer()\n  if (data.isSunday) {\n    tmp = now.addText('Have a nice weekend')\n  } else {\n  \ttmp = now.addText(data.now + '\\n' + data.period)\n  }\n  now.addSpacer()\n  tmp.centerAlignText()\n  tmp.textColor = new Color(settings.theme.current)\n  tmp.font = new Font('Kailasa-Bold', 16)\n  next = rightSide.addStack()\n  next.backgroundColor = new Color(settings.theme.updateTime)\n  next.size = new Size(220, 73)\n  next.layoutVertically()\n  next = next.addStack()\n  next.addSpacer()\n  if (data.isSunday) {\n    tmp = next.addText('<-- get ready for tomorrow')\n  } else if (data.isAfterSchool) {\n    tmp = next.addText('今日の授業は終了しました')\n  } else { \n    tmp = next.addText(data.next + '\\n' + data.nextPeriod)\n  }\n  next.addSpacer()\n  tmp.centerAlignText()\n  tmp.textColor = new Color(settings.theme.bg)\n  tmp.font = new Font('Kailasa-Bold', 16)\n}\nScript.setWidget(list)\nScript.complete()",
  "share_sheet_inputs" : [

  ]
}